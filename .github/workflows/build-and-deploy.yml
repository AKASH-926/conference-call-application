name: Build Maven Project

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    uses: ./github/workflows/prepare_runner.yml

    steps:
           
    - name: Run Unit Test
      run: |
        cd react
        npm install --include=dev
        npm test
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    

  run_conference_test:
    runs-on: ubuntu-latest 
    uses: ./github/workflows/prepare_runner.yml
    needs: build
    steps:
      - name: Run Conference Integration Test
        run: |
          cd test
          python3 test_main.py ${{ secrets.STAGING_SERVER_URL }} ${{ secrets.USER_NAME }} ${{ secrets.PASSWORD }} ../webapp/target/*.war
  
  run_webinar_test:
    runs-on: ubuntu-latest 
    uses: ./github/workflows/prepare_runner.yml
    needs: build
    steps:
      - name: Run Conference Integration Test
        run: |
          cd test
          python3 test_main.py ${{ secrets.STAGING_SERVER_URL }} ${{ secrets.USER_NAME }} ${{ secrets.PASSWORD }} ../webapp/target/*.war

  
      - name: Upload PNG files as artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: screenshots
          path: ${{ github.workspace }}/test/**/*.png

      - name: Upload log files as artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: /tmp/chromedriver.log
            
      - name: Publish to Maven Central
        if: github.ref == 'refs/heads/main'
        run: |
          cd webapp
          ls -alh
          ls -alh target/
          mvn -e deploy -DskipTests --quiet --settings ../mvn-settings.xml
        env:
          MAVEN_USERNAME: ${{ secrets.MVN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MVN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MVN_GPG_PASSPHRASE }}


  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Get versions data from repo
      run: wget -O maven-metadata.xml https://oss.sonatype.org/service/local/repositories/snapshots/content/io/antmedia/ant-media-server/maven-metadata.xml       
    - name: Install jq
      run: sudo apt-get install jq -y
    - name: Download war File
      run: |
        export LATEST_SNAPSHOT=$(cat maven-metadata.xml | grep "<version>" | tail -n 1 |  xargs | grep -oP "(?<=<version>).*?(?=</version>)")
        echo $LATEST_SNAPSHOT
        wget -O ConferenceCall.war "https://oss.sonatype.org/service/local/artifact/maven/redirect?r=snapshots&g=io.antmedia.webrtc&a=ConferenceCall&v=${LATEST_SNAPSHOT}&e=war"
        ls -al
        if [ ! -f ConferenceCall.war ]; then
          echo "War file not found."
          exit 1
        fi
        
    - name: Login to server
      run: |
        response=$(curl -X POST -H "Accept: Application/json" -H "Content-Type: application/json" ${{ secrets.STAGING_SERVER_URL }}/rest/v2/users/authenticate -d '{"email":"${{ secrets.USER_NAME }}","password":"${{ secrets.PASSWORD }}"}' -c cookie.txt)
        success=$(echo $response | jq -r '.success')
        if [ "$success" != "true" ]; then
          echo "Login failed"
          exit 1
        fi
        
    - name: Check if Conference App Exists
      run: |
        response=$(curl -s -H "Accept: Application/json" -H "Content-Type: application/json" "${{ secrets.STAGING_SERVER_URL }}/rest/v2/applications" -b cookie.txt)
        echo $response | jq .
        app_exists=$(echo $response | jq -r '.applications | index("Conference")')
        if [ "$app_exists" != "null" ]; then
          echo "App exists, proceeding to delete it."
          response=$(curl -s -X DELETE -H "Accept: Application/json" -H "Content-Type: application/json" "${{ secrets.STAGING_SERVER_URL }}/rest/v2/applications/Conference" -b cookie.txt)
          success=$(echo $response | jq -r '.success')
          if [ "$success" != "true" ]; then
            echo "Conference app deletion failed"
            exit 1
          fi
          sleep 10
        else
          echo "App does not exist, proceeding to create a new one."
        fi
                  
    - name: Create New App
      run: |
        export WAR_FILE_NAME="ConferenceCall.war"
        response=$(curl -X PUT -H "Accept: Application/json" -H "Content-Type: multipart/form-data" -F "file=@./$WAR_FILE_NAME" "${{ secrets.STAGING_SERVER_URL }}/rest/v2/applications/Conference" -b cookie.txt)
        sleep 5
        success=$(echo $response | jq -r '.success')
        if [ "$success" != "true" ]; then
          echo "Conference app creation is failed"
          exit 1
        fi
        sleep 10
        
    - name: Update Turn Settings
      run: |
        curl "${{ secrets.STAGING_SERVER_URL }}/rest/v2/applications/settings/Conference" -b cookie.txt -o settings.json
        jq '.stunServerURI = "turn:${{ secrets.STAGING_TURN_URL }}" | .turnServerUsername = "${{ secrets.STAGING_TURN_USERNAME }}" | .turnServerCredential = "${{ secrets.STAGING_TURN_PASSWORD }}"' settings.json > updated_settings.json
        response=$(curl -X POST -H "Accept: Application/json" -H "Content-Type: application/json" -d @updated_settings.json -b cookie.txt "${{ secrets.STAGING_SERVER_URL }}/rest/v2/applications/settings/Conference")
        success=$(echo $response | jq -r '.success')
        if [ "$success" != "true" ]; then
          echo "Importing setting is failed."
          exit 1
        fi